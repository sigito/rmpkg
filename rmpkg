#!/bin/sh

PKGUTIL=/usr/sbin/pkgutil
LSBOM=/usr/bin/lsbom
BASENAME=/usr/bin/basename
DATE=/bin/date
FIND=/usr/bin/find
XMLLINT=/usr/bin/xmllint

SUDO=/usr/bin/sudo
SUDO_OPTS="-s"

RM=/bin/rm
RM_ARGS="-i"
RM_ALL_OPT="-r"

# Temporal files directory
TMP_DIR=/tmp

# File templates
PACKAGE_INFO=PackageInfo
BOM=Bom

print_description() {
  echo "The $(${BASENAME} $0) utility removes Mac OS packages by their pkg files."
  print_usage
}

print_usage() {
  echo "Usage: $(${BASENAME} $0) [-hfd] [-t tmp_dir] -p path_to_pkg"
  echo "       -p path-to-pkg -â€“ specify path to package to delete."
  echo "       -h -- print short description and this message."
  echo "       -f -- force delete files. Will not ask for delection of every file."
  echo "       -d -- remove whole directory with package installation."
  echo "       -t tmp_dir -- specify directory to put temporal files to. Default is $TMP_DIR."
}

clean_up() {
  # clean up
  if [ -n "$EXPAND_DIR" ]; then
    info "Removing temporary directory $EXPAND_DIR"
    "$RM" -rf "$EXPAND_DIR"
  fi
}

info() {
  echo "Info: $*"
}

warn() {
  echo "Warn: $*"
}

error() {
  echo "ERROR: $*"
}

# parse input parameters to RM_* and PKG variables
parse_parameters() {
  while getopts ":hfdt:p:" flag
  do
    case $flag in
      h)
        # print description and exit
        print_description
        exit 0
        ;;
      f)
        # force delete pkg files
        info "-f option specified. Forcing deletion."
        RM_ARGS="-f"
        ;;
      d)
        # delete full pkg directory instead of one-by-one per file removal
        info "-d option specified. Removing whole package installation."
        RM_ALL="y"
        ;;
      p)
        # package name to work with
        # check if we can read package
        if [ -r "$OPTARG" ]; then
          PKG="$OPTARG"
          info "$PKG will be deleted."
        else
          error "Cannot open for read $OPTARG."
          exit 1
        fi
        ;;
      t)
        # change dir to work with package.
        # check if directory exists
        if [ -d "$OPTARG" ]; then
          TMP_DIR="$OPTARG"
          info "Work with package will be done in $TMP_DIR"
        else
          warn "No such directory $OPTARG. Temporal files derectory left default: $TMP_DIR"
        fi
        ;;
      ?)
        warn "Unknown flag: $OPTARG"
        ;;
      *)
        error "Unexpected flag: $flag, arg: $OPTARG."
        if [ -r "$OPTARG" ]; then
          PKG="$OPTARG"
          info "$PKG will be considered for deletion."
        fi
        ;;
    esac
  done
}

parse_parameters "$@"

# check if package name passed
if [ -z "$PKG" ]; then
  error "Package not specified."
  print_usage
  exit 1
fi

PKG_NAME="$(${BASENAME} "${PKG}")"
if [ $? -ne 0 ]; then
  error "Cannot extract package name from path $PKG"
  exit 1
fi

# generate directory to expand package to
EXPAND_DIR="${TMP_DIR}/${PKG_NAME}.${RANDOM}.$($DATE +%s)"

# extract package
info "Expanding ${PKG} to $EXPAND_DIR"
$PKGUTIL --expand "$PKG" "$EXPAND_DIR"
if [ $? -ne 0 ]; then
  error "Failed while expanding $PKG to $EXPAND_DIR"
  clean_up
  exit 1
fi

# remember current working dir
pushd .

# go to dir with expanded pkg
cd "$EXPAND_DIR"

# look for dir with ending '.pkg' and delete content of every subpackage
for pkg_dir in $(${FIND} . -type d -name "*.pkg"); do
  info "Processing subpackage $pkg_dir"
  # remember working directory
  pushd .
  # go to pkg content dir
  cd "$pkg_dir"

  info "Parsing install-location..."
  install_dir="$($XMLLINT --xpath "string(//@install-location)" "$PACKAGE_INFO")"
  info "install-location: $install_dir"

  info "Removing installed package content..."

  if [ "$RM_ALL" = "y" ]; then
    full_dir_path="${install_dir}/$($XMLLINT --xpath "string(//bundle/@path)" "$PACKAGE_INFO")"

    info "Removing whole $full_dir_path"
    "$SUDO" "$RM" "$RM_ARGS" "$RM_ALL_OPT" "$full_dir_path"
    if [ $? != 0 ]; then
      info "Unable to delete $full_dir_path"
      clean_up
      exit 2
    fi
  else
    for file in $("$LSBOM" -slf "$BOM"); do
      full_path="${install_dir}/${file}"
      info "Removing $full_path"
      "$SUDO" "$SUDO_OPTS" "$RM" "$RM_ARGS" "$full_path"
      if [ $? != 0 ]; then
        info "Unable to delete $full_path"
        clean_up
        exit 2
      fi
    done
  fi

  # get back to root
  popd
done

# go to execution directory
popd

clean_up

info "Success."
exit 0
